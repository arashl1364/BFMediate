% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MeasurementMCat.R
\name{MeasurementMCat}
\alias{MeasurementMCat}
\title{Sampler for Partial Mediation Model with Multiple Categorical Indicator for the Mediator}
\usage{
MeasurementMCat(Data,Prior,R)
}
\arguments{
\item{Data}{list(X, m_star, Y)}

\item{Prior}{list(A_M,A_Y)}

\item{R}{number of MCMC iterations, default = 10000}
}
\value{
\describe{
\item{beta_M(R X 2)}{matrix of eq.1 coefficients' draws}
\item{beta_Y(R X 3)}{matrix of eq.2 coefficients' draws}
\item{lambda (M_ind X 2 X R)}{array of indicator coefficients' draws. Each slice is one draw, where rows represent the indicator equation and columns the coefficients. All Slope coefficients as well as intercept of the first equation are fixed to 1 and 0 respectively.}
\item{ssq_m_star(R X M_ind)}{Matrix of indicator equations' coefficients' error variance draws}
\item{ssq_Y(R X 1)}{vector of eq.2 error variance draws}
\item{cutoff_M (M_ind X k_M X R)}{array of discretized mediator indicators' cutoff values.}
\item{Mdraw(R X N)}{Matrix of the augmented latent mediator}
\item{mu_draw}{vector of means indexing MCMC draws of the direct effect (used in BFSD to compute Bayes factor)}
\item{var_draw}{vector of variance indexing MCMC draws of the direct effect (used in BFSD to compute Bayes factor)}
}
}
\description{
Estimates a partial mediation model with multiple categorical indicator for the mediator and with an observed dependent variable using a mixture of Metropolis-Hastings and Gibbs sampling
}
\details{
\subsection{Model}{

\eqn{M = \beta_{0M} + X\beta_1 + U_M}{M = \beta_0M + X\beta_1 + U_M} (eq.1) \cr
\eqn{Y = \beta_{0Y} + M\beta_2 + X\beta_3 + U_Y}{Y = \beta_0Y + M\beta_2 + X\beta_3 + U_Y} (eq.2) \cr
}

\subsection{Indicator equations}{

\eqn{m^*_1 = M + U_{m^*_1}}{m*_1 = M + U_{m*_1}} \cr
\eqn{\tilde{m}_1 = OrdProbit(m^*_1 ,C_{m_1})}{˜m_1 = OrdProbit(m*_1,C_{m_1})} \cr
\eqn{m^*_2 = \lambda_{20} + M + U_{m^*_2}}{m*_2 = \lambda_20 + M + U_{m*_2}} \cr
\eqn{\tilde{m}_2 = OrdProbit(m^*_2 ,C_{m_2})}{˜m_2 = OrdProbit(m*_2,C_{m_2})} \cr
\eqn{...} \cr
\eqn{m^*_K = \lambda_{K0} + M + U_{m^*_K}}{m*_K = \lambda_K0 + M + U_{m*_K}} \cr
\eqn{\tilde{m}_K = OrdProbit(m^*_K ,C_{m_K})}{˜m_K = OrdProbit(m*_K,C_{m_K})} \cr
}

\subsection{Prior specification:}{

\eqn{\beta_{0M}} \eqn{\sim}{~} N(0,100), \eqn{\beta_{0Y}} \eqn{\sim}{~} \eqn{N(0,100)}  \cr
\eqn{\beta_1} \eqn{\sim}{~} \eqn{N(0,100), \beta_2} \eqn{\sim}{~} \eqn{N(0,100), \beta_3} \eqn{\sim}{~} \eqn{N(0,1)}  \cr
\eqn{\sigma^2_Y} \eqn{\sim}{~} \eqn{Inv\chi^2(\nu,\nu S)}, where \eqn{\nu=1} and S=3. \cr
\eqn{\lambda_{20},...,\lambda_{K0}} \eqn{\sim}{~}  \eqn{N(0,100)}  \cr
\eqn{\sigma^2_{m*_1}, ..., \sigma^2_{m*_K}} \eqn{\sim}{~} \eqn{Inv\chi^2(\nu,\nu S)} \cr
\eqn{C*_{m_1}, ..., C*_{m_K}} \eqn{\sim}{~} \eqn{N(0,I)} \cr

Note: \eqn{C*_{m_1}, ..., C*_{m_K}} are untransformed
cutoffs, which are then exponentially transformed to impose sign and order constraint on them. Subjective prior values for the error variances are \eqn{\nu=1}, S=3.
}

\subsection{Argument Details}{
}

\subsection{\code{Data = list(X, m_star, Y)}}{

\describe{
\item{X(N x 1)}{treatment variable vector}
\item{m_star(N x M_ind)}{mediator indicators' matrix}
\item{Y(N x 1)}{dependent variable vector}
}
}

\subsection{\code{Prior = list(A_M,A_Y)} [optional]}{

\describe{
\item{A_M}{vector of coefficients' prior variances of eq.1, default = rep(100,2)}
\item{A_Y}{vector of coefficients' prior variances of eq.2, default = c(100,100,1)}
}
}
}
\examples{
set.seed(60)
SimMeasurementMCat = function(X, beta_M, cutoff_M, beta_Y, Sigma_Y, M_ind, lambda, ssq_m_star){

  nobs = dim(X)[1]
  m_star = m_tilde = matrix(double(nobs*M_ind), ncol = M_ind)

  M = beta_M[1] + beta_M[2] * X + rnorm(nobs)  #cbind(rep(1,nobs),X)\%*\%beta_M + rnorm(nobs)

  for(i in 1: M_ind){
    m_star[,i] = lambda[i] + M + sqrt(ssq_m_star[i])*rnorm(nobs);
    m_tilde[,i] = cut(m_star[,i], br = cutoff_M[i,], right=TRUE, include.lowest = TRUE, labels = FALSE)
  }

  Y = beta_Y[1] + beta_Y[2] * M + beta_Y[3] * X + rnorm(nobs)*Sigma_Y
                                                     #cbind(rep(1,nobs),cbind(M,X))\%*\%beta_Y + rnorm(nobs)

  return(list(Y = Y, M = M, m_tilde = m_tilde, X = X,
              beta_M = beta_M, beta_Y = beta_Y,
              lambda = lambda, ssq_m_star = ssq_m_star, m_star = m_star, cutoff_M = cutoff_M,
              k_M=dim(cutoff_M)[2]-1, M_ind=M_ind))
}

M_ind = 2
Mcut =  8
nobs= 1000
X=as.matrix(runif(nobs,min=0, max=1))
beta_M = c(.5,1)
beta_Y = c(1, 2, 0)
Sigma_Y = 1^.5
ssq_m_star = c(.5,.7)
lambda = c(0,-.5)   #the intercepts for the latent M indicators w. measurement
                    #error (first intercept should always be 0)

cutoff_M = matrix(c(-100, 0, 1.6, 2, 2.2, 3.3, 6,  100,
                    -100, 0, 1, 2, 3, 4, 5, 100) ,ncol= Mcut, byrow = T)
DataMCat = SimMeasurementMCat(X, beta_M, cutoff_M, beta_Y, Sigma_Y, M_ind, lambda, ssq_m_star)

#estimation
Data = list(X=cbind(rep(1,length(DataMCat$X)),DataMCat$X), m_tilde=as.matrix(DataMCat$m_tilde),
            Y= as.matrix(DataMCat$Y) ,k=Mcut-1, M_ind=dim(DataMCat$m_tilde)[2])
out = MeasurementMCat(Data=Data, R=R)


#results
colMeans(out$beta_M)
colMeans(out$beta_Y)
apply(out$cutoff_M,c(1,2),FUN = mean)
}
