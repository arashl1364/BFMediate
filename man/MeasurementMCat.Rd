% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MeasurementMCat.R
\name{MeasurementMCat}
\alias{MeasurementMCat}
\title{Sampler for Partial Mediation Model with Multiple Categorical Indicator for the Mediator}
\usage{
MeasurementMCat(Data,Prior,R)
}
\arguments{
\item{Data}{list(X, m_star, Y)}

\item{Prior}{list(A_M,A_Y)}

\item{R}{number of MCMC iterations, default = 10000}
}
\value{
\describe{
\item{beta_1(R X 2)}{matrix of eq.1 coefficients' draws}
\item{beta_2(R X 3)}{matrix of eq.2 coefficients' draws}
\item{lambda (M_ind X 2 X R)}{array of indicator coefficients' draws. Each slice is one draw, where rows represent the indicator equation and columns are the coefficients. All Slope coefficients as well as intercept of the first equation are fixed to 1 and 0 respectively.}
\item{ssq_m_star(R X M_ind)}{Matrix of indicator equations' coefficients' error variance draws}
\item{ssq_Y(R X 1)}{vector of eq.2 error variance draws}
\item{mu_draw}{vector of means of MCMC draws of the direct effect (used in BFSD to compute Bayes factor)}
\item{var_draw}{vector of means of MCMC draws of the direct effect (used in BFSD to compute Bayes factor)}
}
}
\description{
Estimates a partial mediation model with multiple categorical indicator for the mediator and observed dependent variable using a mixture of Metropolis-Hastings and Gibbs sampling
}
\details{
Model:

(eq.1) \deqn{M = \beta_{0M} + X\beta_1 + U_M}{M = \beta_0M + X\beta_1 + U_M}
(eq.2) \deqn{Y = \beta_{0Y} + M\beta_2 + X\beta_3 + U_Y}{Y = \beta_0Y + M\beta_2 + X\beta_3 + U_Y}Indicator equations:

\deqn{m^*_1 = M + U_{m^*_1}}{m*_1 = M + U_{m*_1}}
\deqn{\tilde{m}_1 = OrdProbit(m^*_1 ,C_{m_1})}{˜m_1 = OrdProbit(m*_1,C_{m_1})}
\deqn{m^*_2 = \lambda_{01} + M + U_{m^*_2}}{m*_2 = \lambda_01 + M + U_{m*_2}}
\deqn{\tilde{m}_2 = OrdProbit(m^*_2 ,C_{m_2})}{˜m_2 = OrdProbit(m*_2,C_{m_2})}
\deqn{...}
\deqn{m^*_k = \lambda_{0k-1} + M + U_{m^*_k}}{m*_k = \lambda_0k-1 + M + U_{m*_k}}
\deqn{\tilde{m}_k = OrdProbit(m^*_k ,C_{m_k})}{˜m_k = OrdProbit(m*_k,C_{m_k})}
Argument Details\code{Data = list(X, m_star, Y)}

\describe{
\item{X(N x 1)}{treatment variable vector}
\item{m_star(N x M_ind)}{mediator indicators' matrix}
\item{Y(N x 1)}{dependent variable vector}
}\code{Prior = list(A_M,A_Y)} [optional]

\describe{
\item{A_M}{vector of coefficients' prior variances of eq.1, default = rep(100,2)}
\item{A_Y}{vector of coefficients' prior variances of eq.2, default = c(100,100,1)}
}
}
\examples{
SimMeasurementMCat = function(X, beta_1, cutoff_M, beta_2, Sigma_Y, M_ind, lambda, ssq_m_star){

  nobs = dim(X)[1]
  m_star = m_tilde = matrix(double(nobs*M_ind), ncol = M_ind)

  M = beta_1[1] + beta_1[2] * X + rnorm(nobs)  #cbind(rep(1,nobs),X)\%*\%beta_1 + rnorm(nobs)

  for(i in 1: M_ind){
    m_star[,i] = lambda[i] + M + sqrt(ssq_m_star[i])*rnorm(nobs);
    m_tilde[,i] = cut(m_star[,i], br = cutoff_M[i,], right=TRUE, include.lowest = TRUE, labels = FALSE)
  }

  Y = beta_2[1] + beta_2[2] * M + beta_2[3] * X + rnorm(nobs)*Sigma_Y
                                                     #cbind(rep(1,nobs),cbind(M,X))\%*\%beta_2 + rnorm(nobs)

  return(list(Y = Y, M = M, m_tilde = m_tilde, X = X,
              beta_1 = beta_1, beta_2 = beta_2,
              lambda = lambda, ssq_m_star = ssq_m_star, m_star = m_star, cutoff_M = cutoff_M,
              k_M=dim(cutoff_M)[2]-1, M_ind=M_ind))
}

M_ind = 2
Mcut =  8
nobs= 500
X=as.matrix(runif(nobs,min=0, max=1))
beta_1 = c(.5,1)
beta_2 = c(1, 2, 0)
Sigma_Y = 1^.5
ssq_m_star = c(.5,.7)
lambda = c(0,-.5)   #the intercepts for the latent M indicators w. measurement
                    #error (first intercept should always be 0)

cutoff_M = matrix(c(-100, 0, 1.6, 2, 2.2, 3.3, 6,  100,
                    -100, 0, 1, 2, 3, 4, 5, 100) ,ncol= Mcut, byrow = T)
DataMCat = SimMeasurementMCat(X, beta_1, cutoff_M, beta_2, Sigma_Y, M_ind, lambda, ssq_m_star)

#estimation
Data = list(X=cbind(rep(1,length(DataMCat$X)),DataMCat$X), m_tilde=as.matrix(DataMCat$m_tilde),
            Y= as.matrix(DataMCat$Y) ,k=Mcut-1, M_ind=dim(DataMCat$m_tilde)[2])
out = MeasurementMCat(Data=Data, R=R)


#results
colMeans(out$beta_1)
colMeans(out$beta_2)
apply(out$cutoff_M,c(1,2),FUN = mean)
}
