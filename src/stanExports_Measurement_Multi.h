// Generated by rstantools.  Do not edit by hand.

/*
    BFMediate is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BFMediate is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BFMediate.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.0
#include <stan/model/model_header.hpp>
namespace model_Measurement_Multi_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_Measurement_Multi");
    reader.add_event(68, 66, "end", "model_Measurement_Multi");
    return reader;
}
#include <stan_meta_header.hpp>
class model_Measurement_Multi : public prob_grad {
private:
    int n;
    int M_ind;
    int Y_ind;
    vector_d A_M;
    vector_d A_Y;
    vector_d X;
    vector<vector_d> m_star;
    vector<vector_d> y_star;
public:
    model_Measurement_Multi(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_Measurement_Multi(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_Measurement_Multi_namespace::model_Measurement_Multi";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        // initialize member variables
        try {
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "M_ind", "int", context__.to_vec());
            M_ind = int(0);
            vals_i__ = context__.vals_i("M_ind");
            pos__ = 0;
            M_ind = vals_i__[pos__++];
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "Y_ind", "int", context__.to_vec());
            Y_ind = int(0);
            vals_i__ = context__.vals_i("Y_ind");
            pos__ = 0;
            Y_ind = vals_i__[pos__++];
            current_statement_begin__ = 6;
            validate_non_negative_index("A_M", "2", 2);
            context__.validate_dims("data initialization", "A_M", "vector_d", context__.to_vec(2));
            validate_non_negative_index("A_M", "2", 2);
            A_M = vector_d(static_cast<Eigen::VectorXd::Index>(2));
            vals_r__ = context__.vals_r("A_M");
            pos__ = 0;
            size_t A_M_i_vec_lim__ = 2;
            for (size_t i_vec__ = 0; i_vec__ < A_M_i_vec_lim__; ++i_vec__) {
                A_M[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("A_Y", "3", 3);
            context__.validate_dims("data initialization", "A_Y", "vector_d", context__.to_vec(3));
            validate_non_negative_index("A_Y", "3", 3);
            A_Y = vector_d(static_cast<Eigen::VectorXd::Index>(3));
            vals_r__ = context__.vals_r("A_Y");
            pos__ = 0;
            size_t A_Y_i_vec_lim__ = 3;
            for (size_t i_vec__ = 0; i_vec__ < A_Y_i_vec_lim__; ++i_vec__) {
                A_Y[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("X", "n", n);
            context__.validate_dims("data initialization", "X", "vector_d", context__.to_vec(n));
            validate_non_negative_index("X", "n", n);
            X = vector_d(static_cast<Eigen::VectorXd::Index>(n));
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_i_vec_lim__ = n;
            for (size_t i_vec__ = 0; i_vec__ < X_i_vec_lim__; ++i_vec__) {
                X[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("m_star", "M_ind", M_ind);
            validate_non_negative_index("m_star", "n", n);
            context__.validate_dims("data initialization", "m_star", "vector_d", context__.to_vec(M_ind,n));
            validate_non_negative_index("m_star", "M_ind", M_ind);
            validate_non_negative_index("m_star", "n", n);
            m_star = std::vector<vector_d>(M_ind,vector_d(static_cast<Eigen::VectorXd::Index>(n)));
            vals_r__ = context__.vals_r("m_star");
            pos__ = 0;
            size_t m_star_i_vec_lim__ = n;
            for (size_t i_vec__ = 0; i_vec__ < m_star_i_vec_lim__; ++i_vec__) {
                size_t m_star_limit_0__ = M_ind;
                for (size_t i_0__ = 0; i_0__ < m_star_limit_0__; ++i_0__) {
                    m_star[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("y_star", "Y_ind", Y_ind);
            validate_non_negative_index("y_star", "n", n);
            context__.validate_dims("data initialization", "y_star", "vector_d", context__.to_vec(Y_ind,n));
            validate_non_negative_index("y_star", "Y_ind", Y_ind);
            validate_non_negative_index("y_star", "n", n);
            y_star = std::vector<vector_d>(Y_ind,vector_d(static_cast<Eigen::VectorXd::Index>(n)));
            vals_r__ = context__.vals_r("y_star");
            pos__ = 0;
            size_t y_star_i_vec_lim__ = n;
            for (size_t i_vec__ = 0; i_vec__ < y_star_i_vec_lim__; ++i_vec__) {
                size_t y_star_limit_0__ = Y_ind;
                for (size_t i_0__ = 0; i_0__ < y_star_limit_0__; ++i_0__) {
                    y_star[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            // validate, data variables
            current_statement_begin__ = 3;
            current_statement_begin__ = 4;
            current_statement_begin__ = 5;
            current_statement_begin__ = 6;
            current_statement_begin__ = 7;
            current_statement_begin__ = 8;
            current_statement_begin__ = 9;
            current_statement_begin__ = 10;
            // initialize data variables
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 13;
            ++num_params_r__;
            current_statement_begin__ = 13;
            ++num_params_r__;
            current_statement_begin__ = 15;
            ++num_params_r__;
            current_statement_begin__ = 17;
            ++num_params_r__;
            current_statement_begin__ = 17;
            ++num_params_r__;
            current_statement_begin__ = 18;
            validate_non_negative_index("lambda", "2", 2);
            validate_non_negative_index("lambda", "(M_ind - 1)", (M_ind - 1));
            num_params_r__ += 2 * (M_ind - 1);
            current_statement_begin__ = 19;
            validate_non_negative_index("tau", "2", 2);
            validate_non_negative_index("tau", "(Y_ind - 1)", (Y_ind - 1));
            num_params_r__ += 2 * (Y_ind - 1);
            current_statement_begin__ = 20;
            validate_non_negative_index("ssq_m_star", "M_ind", M_ind);
            num_params_r__ += M_ind;
            current_statement_begin__ = 21;
            validate_non_negative_index("ssq_y_star", "Y_ind", Y_ind);
            num_params_r__ += Y_ind;
            current_statement_begin__ = 22;
            ++num_params_r__;
            current_statement_begin__ = 22;
            ++num_params_r__;
            current_statement_begin__ = 23;
            validate_non_negative_index("M", "n", n);
            num_params_r__ += n;
            current_statement_begin__ = 23;
            validate_non_negative_index("Y", "n", n);
            num_params_r__ += n;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_Measurement_Multi() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        if (!(context__.contains_r("beta_1")))
            throw std::runtime_error("variable beta_1 missing");
        vals_r__ = context__.vals_r("beta_1");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta_1", "double", context__.to_vec());
        double beta_1(0);
        beta_1 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(beta_1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta_1: ") + e.what());
        }
        if (!(context__.contains_r("beta_2")))
            throw std::runtime_error("variable beta_2 missing");
        vals_r__ = context__.vals_r("beta_2");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta_2", "double", context__.to_vec());
        double beta_2(0);
        beta_2 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(beta_2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta_2: ") + e.what());
        }
        if (!(context__.contains_r("beta_3")))
            throw std::runtime_error("variable beta_3 missing");
        vals_r__ = context__.vals_r("beta_3");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta_3", "double", context__.to_vec());
        double beta_3(0);
        beta_3 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(beta_3);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta_3: ") + e.what());
        }
        if (!(context__.contains_r("beta_0_M")))
            throw std::runtime_error("variable beta_0_M missing");
        vals_r__ = context__.vals_r("beta_0_M");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta_0_M", "double", context__.to_vec());
        double beta_0_M(0);
        beta_0_M = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(beta_0_M);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta_0_M: ") + e.what());
        }
        if (!(context__.contains_r("beta_0_Y")))
            throw std::runtime_error("variable beta_0_Y missing");
        vals_r__ = context__.vals_r("beta_0_Y");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta_0_Y", "double", context__.to_vec());
        double beta_0_Y(0);
        beta_0_Y = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(beta_0_Y);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta_0_Y: ") + e.what());
        }
        if (!(context__.contains_r("lambda")))
            throw std::runtime_error("variable lambda missing");
        vals_r__ = context__.vals_r("lambda");
        pos__ = 0U;
        validate_non_negative_index("lambda", "(M_ind - 1)", (M_ind - 1));
        validate_non_negative_index("lambda", "2", 2);
        context__.validate_dims("initialization", "lambda", "vector_d", context__.to_vec((M_ind - 1),2));
        std::vector<vector_d> lambda((M_ind - 1),vector_d(static_cast<Eigen::VectorXd::Index>(2)));
        for (int j1__ = 0U; j1__ < 2; ++j1__)
            for (int i0__ = 0U; i0__ < (M_ind - 1); ++i0__)
                lambda[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < (M_ind - 1); ++i0__)
            try {
            writer__.vector_unconstrain(lambda[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable lambda: ") + e.what());
        }
        if (!(context__.contains_r("tau")))
            throw std::runtime_error("variable tau missing");
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        validate_non_negative_index("tau", "(Y_ind - 1)", (Y_ind - 1));
        validate_non_negative_index("tau", "2", 2);
        context__.validate_dims("initialization", "tau", "vector_d", context__.to_vec((Y_ind - 1),2));
        std::vector<vector_d> tau((Y_ind - 1),vector_d(static_cast<Eigen::VectorXd::Index>(2)));
        for (int j1__ = 0U; j1__ < 2; ++j1__)
            for (int i0__ = 0U; i0__ < (Y_ind - 1); ++i0__)
                tau[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < (Y_ind - 1); ++i0__)
            try {
            writer__.vector_unconstrain(tau[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau: ") + e.what());
        }
        if (!(context__.contains_r("ssq_m_star")))
            throw std::runtime_error("variable ssq_m_star missing");
        vals_r__ = context__.vals_r("ssq_m_star");
        pos__ = 0U;
        validate_non_negative_index("ssq_m_star", "M_ind", M_ind);
        context__.validate_dims("initialization", "ssq_m_star", "vector_d", context__.to_vec(M_ind));
        vector_d ssq_m_star(static_cast<Eigen::VectorXd::Index>(M_ind));
        for (int j1__ = 0U; j1__ < M_ind; ++j1__)
            ssq_m_star(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,ssq_m_star);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable ssq_m_star: ") + e.what());
        }
        if (!(context__.contains_r("ssq_y_star")))
            throw std::runtime_error("variable ssq_y_star missing");
        vals_r__ = context__.vals_r("ssq_y_star");
        pos__ = 0U;
        validate_non_negative_index("ssq_y_star", "Y_ind", Y_ind);
        context__.validate_dims("initialization", "ssq_y_star", "vector_d", context__.to_vec(Y_ind));
        vector_d ssq_y_star(static_cast<Eigen::VectorXd::Index>(Y_ind));
        for (int j1__ = 0U; j1__ < Y_ind; ++j1__)
            ssq_y_star(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,ssq_y_star);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable ssq_y_star: ") + e.what());
        }
        if (!(context__.contains_r("ssq_M")))
            throw std::runtime_error("variable ssq_M missing");
        vals_r__ = context__.vals_r("ssq_M");
        pos__ = 0U;
        context__.validate_dims("initialization", "ssq_M", "double", context__.to_vec());
        double ssq_M(0);
        ssq_M = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,ssq_M);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable ssq_M: ") + e.what());
        }
        if (!(context__.contains_r("ssq_Y")))
            throw std::runtime_error("variable ssq_Y missing");
        vals_r__ = context__.vals_r("ssq_Y");
        pos__ = 0U;
        context__.validate_dims("initialization", "ssq_Y", "double", context__.to_vec());
        double ssq_Y(0);
        ssq_Y = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,ssq_Y);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable ssq_Y: ") + e.what());
        }
        if (!(context__.contains_r("M")))
            throw std::runtime_error("variable M missing");
        vals_r__ = context__.vals_r("M");
        pos__ = 0U;
        validate_non_negative_index("M", "n", n);
        context__.validate_dims("initialization", "M", "vector_d", context__.to_vec(n));
        vector_d M(static_cast<Eigen::VectorXd::Index>(n));
        for (int j1__ = 0U; j1__ < n; ++j1__)
            M(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(M);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable M: ") + e.what());
        }
        if (!(context__.contains_r("Y")))
            throw std::runtime_error("variable Y missing");
        vals_r__ = context__.vals_r("Y");
        pos__ = 0U;
        validate_non_negative_index("Y", "n", n);
        context__.validate_dims("initialization", "Y", "vector_d", context__.to_vec(n));
        vector_d Y(static_cast<Eigen::VectorXd::Index>(n));
        for (int j1__ = 0U; j1__ < n; ++j1__)
            Y(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(Y);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable Y: ") + e.what());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
            local_scalar_t__ beta_1;
            (void) beta_1;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_1 = in__.scalar_constrain(lp__);
            else
                beta_1 = in__.scalar_constrain();
            local_scalar_t__ beta_2;
            (void) beta_2;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_2 = in__.scalar_constrain(lp__);
            else
                beta_2 = in__.scalar_constrain();
            local_scalar_t__ beta_3;
            (void) beta_3;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_3 = in__.scalar_constrain(lp__);
            else
                beta_3 = in__.scalar_constrain();
            local_scalar_t__ beta_0_M;
            (void) beta_0_M;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_0_M = in__.scalar_constrain(lp__);
            else
                beta_0_M = in__.scalar_constrain();
            local_scalar_t__ beta_0_Y;
            (void) beta_0_Y;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_0_Y = in__.scalar_constrain(lp__);
            else
                beta_0_Y = in__.scalar_constrain();
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > lambda;
            size_t dim_lambda_0__ = (M_ind - 1);
            lambda.reserve(dim_lambda_0__);
            for (size_t k_0__ = 0; k_0__ < dim_lambda_0__; ++k_0__) {
                if (jacobian__)
                    lambda.push_back(in__.vector_constrain(2,lp__));
                else
                    lambda.push_back(in__.vector_constrain(2));
            }
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > tau;
            size_t dim_tau_0__ = (Y_ind - 1);
            tau.reserve(dim_tau_0__);
            for (size_t k_0__ = 0; k_0__ < dim_tau_0__; ++k_0__) {
                if (jacobian__)
                    tau.push_back(in__.vector_constrain(2,lp__));
                else
                    tau.push_back(in__.vector_constrain(2));
            }
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ssq_m_star;
            (void) ssq_m_star;  // dummy to suppress unused var warning
            if (jacobian__)
                ssq_m_star = in__.vector_lb_constrain(0,M_ind,lp__);
            else
                ssq_m_star = in__.vector_lb_constrain(0,M_ind);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ssq_y_star;
            (void) ssq_y_star;  // dummy to suppress unused var warning
            if (jacobian__)
                ssq_y_star = in__.vector_lb_constrain(0,Y_ind,lp__);
            else
                ssq_y_star = in__.vector_lb_constrain(0,Y_ind);
            local_scalar_t__ ssq_M;
            (void) ssq_M;  // dummy to suppress unused var warning
            if (jacobian__)
                ssq_M = in__.scalar_lb_constrain(0,lp__);
            else
                ssq_M = in__.scalar_lb_constrain(0);
            local_scalar_t__ ssq_Y;
            (void) ssq_Y;  // dummy to suppress unused var warning
            if (jacobian__)
                ssq_Y = in__.scalar_lb_constrain(0,lp__);
            else
                ssq_Y = in__.scalar_lb_constrain(0);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  M;
            (void) M;  // dummy to suppress unused var warning
            if (jacobian__)
                M = in__.vector_constrain(n,lp__);
            else
                M = in__.vector_constrain(n);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  Y;
            (void) Y;  // dummy to suppress unused var warning
            if (jacobian__)
                Y = in__.vector_constrain(n,lp__);
            else
                Y = in__.vector_constrain(n);
            // transformed parameters
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // model body
            current_statement_begin__ = 29;
            lp_accum__.add(normal_log<propto__>(beta_0_M, 0, get_base1(A_M,1,"A_M",1)));
            current_statement_begin__ = 30;
            lp_accum__.add(normal_log<propto__>(beta_0_Y, 0, get_base1(A_Y,1,"A_Y",1)));
            current_statement_begin__ = 31;
            lp_accum__.add(normal_log<propto__>(beta_1, 0, get_base1(A_M,2,"A_M",1)));
            current_statement_begin__ = 32;
            lp_accum__.add(normal_log<propto__>(beta_2, 0, get_base1(A_Y,2,"A_Y",1)));
            current_statement_begin__ = 34;
            lp_accum__.add(normal_log<propto__>(beta_3, 0, get_base1(A_Y,3,"A_Y",1)));
            current_statement_begin__ = 37;
            if (as_bool(logical_gt(M_ind,1))) {
                current_statement_begin__ = 38;
                for (int i = 1; i <= (M_ind - 1); ++i) {
                    current_statement_begin__ = 39;
                    lp_accum__.add(normal_log<propto__>(get_base1(lambda,i,"lambda",1), 0, 10));
                }
            }
            current_statement_begin__ = 41;
            if (as_bool(logical_gt(Y_ind,1))) {
                current_statement_begin__ = 42;
                for (int i = 1; i <= (Y_ind - 1); ++i) {
                    current_statement_begin__ = 43;
                    lp_accum__.add(normal_log<propto__>(get_base1(tau,i,"tau",1), 0, 10));
                }
            }
            current_statement_begin__ = 45;
            lp_accum__.add(scaled_inv_chi_square_log<propto__>(ssq_M, 1, 3));
            current_statement_begin__ = 46;
            lp_accum__.add(scaled_inv_chi_square_log<propto__>(ssq_Y, 1, 3));
            current_statement_begin__ = 47;
            lp_accum__.add(scaled_inv_chi_square_log<propto__>(ssq_m_star, 1, 3));
            current_statement_begin__ = 48;
            lp_accum__.add(scaled_inv_chi_square_log<propto__>(ssq_y_star, 1, 3));
            current_statement_begin__ = 51;
            lp_accum__.add(normal_log<propto__>(M, add(beta_0_M,multiply(beta_1,X)), stan::math::sqrt(ssq_M)));
            current_statement_begin__ = 53;
            lp_accum__.add(normal_log<propto__>(Y, add(add(beta_0_Y,multiply(beta_2,M)),multiply(beta_3,X)), stan::math::sqrt(ssq_Y)));
            current_statement_begin__ = 56;
            lp_accum__.add(normal_log<propto__>(get_base1(m_star,1,"m_star",1), M, stan::math::sqrt(get_base1(ssq_m_star,1,"ssq_m_star",1))));
            current_statement_begin__ = 57;
            lp_accum__.add(normal_log<propto__>(get_base1(y_star,1,"y_star",1), Y, stan::math::sqrt(get_base1(ssq_y_star,1,"ssq_y_star",1))));
            current_statement_begin__ = 58;
            if (as_bool(logical_gt(M_ind,1))) {
                current_statement_begin__ = 59;
                for (int i = 1; i <= (M_ind - 1); ++i) {
                    current_statement_begin__ = 60;
                    lp_accum__.add(normal_log<propto__>(get_base1(m_star,(i + 1),"m_star",1), add(get_base1(get_base1(lambda,i,"lambda",1),1,"lambda",2),multiply(get_base1(get_base1(lambda,i,"lambda",1),2,"lambda",2),M)), stan::math::sqrt(get_base1(ssq_m_star,(i + 1),"ssq_m_star",1))));
                }
            }
            current_statement_begin__ = 62;
            if (as_bool(logical_gt(Y_ind,1))) {
                current_statement_begin__ = 63;
                for (int i = 1; i <= (Y_ind - 1); ++i) {
                    current_statement_begin__ = 64;
                    lp_accum__.add(normal_log<propto__>(get_base1(y_star,(i + 1),"y_star",1), add(get_base1(get_base1(tau,i,"tau",1),1,"tau",2),multiply(get_base1(get_base1(tau,i,"tau",1),2,"tau",2),Y)), stan::math::sqrt(get_base1(ssq_y_star,(i + 1),"ssq_y_star",1))));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta_1");
        names__.push_back("beta_2");
        names__.push_back("beta_3");
        names__.push_back("beta_0_M");
        names__.push_back("beta_0_Y");
        names__.push_back("lambda");
        names__.push_back("tau");
        names__.push_back("ssq_m_star");
        names__.push_back("ssq_y_star");
        names__.push_back("ssq_M");
        names__.push_back("ssq_Y");
        names__.push_back("M");
        names__.push_back("Y");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((M_ind - 1));
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((Y_ind - 1));
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M_ind);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Y_ind);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_Measurement_Multi_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double beta_1 = in__.scalar_constrain();
        double beta_2 = in__.scalar_constrain();
        double beta_3 = in__.scalar_constrain();
        double beta_0_M = in__.scalar_constrain();
        double beta_0_Y = in__.scalar_constrain();
        vector<vector_d> lambda;
        size_t dim_lambda_0__ = (M_ind - 1);
        for (size_t k_0__ = 0; k_0__ < dim_lambda_0__; ++k_0__) {
            lambda.push_back(in__.vector_constrain(2));
        }
        vector<vector_d> tau;
        size_t dim_tau_0__ = (Y_ind - 1);
        for (size_t k_0__ = 0; k_0__ < dim_tau_0__; ++k_0__) {
            tau.push_back(in__.vector_constrain(2));
        }
        vector_d ssq_m_star = in__.vector_lb_constrain(0,M_ind);
        vector_d ssq_y_star = in__.vector_lb_constrain(0,Y_ind);
        double ssq_M = in__.scalar_lb_constrain(0);
        double ssq_Y = in__.scalar_lb_constrain(0);
        vector_d M = in__.vector_constrain(n);
        vector_d Y = in__.vector_constrain(n);
        vars__.push_back(beta_1);
        vars__.push_back(beta_2);
        vars__.push_back(beta_3);
        vars__.push_back(beta_0_M);
        vars__.push_back(beta_0_Y);
            for (int k_1__ = 0; k_1__ < 2; ++k_1__) {
                for (int k_0__ = 0; k_0__ < (M_ind - 1); ++k_0__) {
                vars__.push_back(lambda[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < 2; ++k_1__) {
                for (int k_0__ = 0; k_0__ < (Y_ind - 1); ++k_0__) {
                vars__.push_back(tau[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < M_ind; ++k_0__) {
            vars__.push_back(ssq_m_star[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < Y_ind; ++k_0__) {
            vars__.push_back(ssq_y_star[k_0__]);
            }
        vars__.push_back(ssq_M);
        vars__.push_back(ssq_Y);
            for (int k_0__ = 0; k_0__ < n; ++k_0__) {
            vars__.push_back(M[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < n; ++k_0__) {
            vars__.push_back(Y[k_0__]);
            }
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // validate transformed parameters
            // write transformed parameters
            if (include_tparams__) {
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            // validate generated quantities
            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_Measurement_Multi";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_0_M";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_0_Y";
        param_names__.push_back(param_name_stream__.str());
        for (int k_1__ = 1; k_1__ <= 2; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (M_ind - 1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= 2; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (Y_ind - 1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tau" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= M_ind; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ssq_m_star" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Y_ind; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ssq_y_star" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "ssq_M";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ssq_Y";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "M" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Y" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_0_M";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_0_Y";
        param_names__.push_back(param_name_stream__.str());
        for (int k_1__ = 1; k_1__ <= 2; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (M_ind - 1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= 2; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (Y_ind - 1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tau" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= M_ind; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ssq_m_star" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Y_ind; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ssq_y_star" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "ssq_M";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ssq_Y";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "M" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Y" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
}; // model
}
typedef model_Measurement_Multi_namespace::model_Measurement_Multi stan_model;
#endif
