ssq_m_tilde = c(.5,1,1.5,1,1,.5)
beta_m_tilde = c(0,-.5,0,-.5,0,-.5)    #the intercepts for the latent M indicators w. measurement error
# ssq_y_tilde = c(.5) #,1,.5,1)
# beta_y_tilde = c(0) #,1,1,1)                 #the intercepts for the latent Y indicators w. measurement error
ssq_y_tilde = c(.5,1)#,1.5,1,1,.5)
beta_y_tilde = c(0,-.5)#,0,-.5,0,-.5)
# dstar_M = matrix(rep(c(3, 3.5, 4, 4.5, 6) ,M_ind),ncol= Mcut-3, byrow = T)
dstar_M = matrix(c( .5, -1, -2, .2, 1,
0, 0, 0, 0, 0,
.5, -1, -2, .2, 1,
0, 0, 0, 0, 0,
0.5,-1, -2, .2, 1,
0.5,-1, -2, .2, 1) ,ncol= Mcut-3, byrow = T)
# dstar_Y = matrix(c( 0.5,-1, -2, .2, 1), ncol= Ycut-3, byrow = T)
dstar_Y = matrix(c( .5, -1, -2, .2, 1,
0, 0, 0, 0, 0) ,ncol= Ycut-3, byrow = T)
cutoff_M = matrix(double(M_ind*Mcut),ncol=Mcut)
cutoff_Y = matrix(double(Y_ind*Ycut),ncol=Ycut)
for(i in 1:M_ind) cutoff_M[i,] = dstartoc(dstar_M[i,])
for(i in 1:Y_ind) cutoff_Y[i,] = dstartoc(dstar_Y[i,])
# cutoff_M = matrix(c(-100, 0, 3, 3.5, 4, 4.5, 6, 100,
#                     -100, 0, 1, 2.5, 3, 3.5, 5, 100) ,ncol= Mcut, byrow = T)
# cutoff_Y = matrix(rep(c(-100, 0, 3, 3.5, 4, 4.5, 6, 100) ,Y_ind),ncol= Ycut, byrow = T)
Data = SimMeasurementMYCat(X, beta_1, cutoff_M, beta_2, cutoff_Y, M_ind, Y_ind, dstar_M, dstar_Y, beta_m_tilde, beta_y_tilde, ssq_m_tilde, ssq_y_tilde)
#estimation
Mcut = max(Data$m_star) + 1
Ycut = max(Data$y_star) + 1
DataMeasurementMYCat = list(X=cbind(rep(1,length(Data$X)),Data$X), m_star=as.matrix(Data$m_star),
y_star=as.matrix(Data$y_star), k_M = Mcut-1, k_Y=Ycut-1,
M_ind=dim(as.matrix(Data$m_star))[2], Y_ind=dim(as.matrix(Data$y_star))[2])
Mcmc = list(R=R)
outMeasurementMYCat = MeasurementMYCat(Data=DataMeasurementMYCat, Mcmc=Mcmc)
#results
colMeans(outMeasurementMYCat$betadraw)
colMeans(outMeasurementMYCat$beta_2_draw)
dstartoc = function (dstar){
ndstar = length(dstar)
c= rep(0,ndstar+3)
c[1] = -100;
c[2] = 0;
c[3:(ndstar+2)] = cumsum(exp(dstar));
c[ndstar+3] = 100;
return (c)
}
SimMeasurementMYCat = function(X, beta_1, cutoff_M, beta_2, cutoff_Y, M_ind, Y_ind, dstar_M, dstar_Y, beta_m_tilde, beta_y_tilde, ssq_m_tilde, ssq_y_tilde){
nobs = dim(X)[1]
m_star = m_tilde = matrix(double(nobs*M_ind), ncol = M_ind)
y_star = y_tilde = matrix(double(nobs*Y_ind), ncol = Y_ind)
M = cbind(rep(1,nobs),X)%*%beta_1 + rnorm(nobs)
for(i in 1: M_ind){
m_tilde[,i] = beta_m_tilde[i] + M + sqrt(ssq_m_tilde[i])*rnorm(nobs);
m_star[,i] = cut(m_tilde[,i], br = cutoff_M[i,], right=TRUE, include.lowest = TRUE, labels = FALSE)
}
Y = cbind(rep(1,nobs),cbind(M,X))%*%beta_2 + rnorm(nobs)
for(i in 1: Y_ind){
y_tilde[,i] = beta_y_tilde[i] + Y + sqrt(ssq_y_tilde[i])*rnorm(nobs);
y_star[,i] = cut(y_tilde[,i], br = cutoff_Y[i,], right=TRUE, include.lowest = TRUE, labels = FALSE)
}
return(list(Y = Y, M = M, y_star = y_star, m_star = m_star, X = X,
k_M=dim(cutoff_M)[2]-1, beta_1 = beta_1, beta_m_tilde = beta_m_tilde, ssq_m_tilde = ssq_m_tilde, m_tilde = m_tilde, cutoff_M = cutoff_M,
k_Y=dim(cutoff_Y)[2]-1, beta_2 = beta_2, beta_y_tilde = beta_y_tilde, ssq_y_tilde = ssq_y_tilde, y_tilde = y_tilde, cutoff_Y = cutoff_Y,
M_ind=M_ind, Y_ind=Y_ind,
dstar_M=dstar_M, dstar_Y=dstar_Y))
}
M_ind = 6
Y_ind = 2
Mcut = Ycut = 8
nobs=1000
X=as.matrix(runif(nobs,min=0, max=1))
beta_1 = c(.5,1)   # beta_1 = c(-1, 3)
beta_2 = c(1, 2, 0)
ssq_m_tilde = c(.5,1,1.5,1,1,.5)
beta_m_tilde = c(0,-.5,0,-.5,0,-.5)    #the intercepts for the latent M indicators w. measurement error
# ssq_y_tilde = c(.5) #,1,.5,1)
# beta_y_tilde = c(0) #,1,1,1)                 #the intercepts for the latent Y indicators w. measurement error
ssq_y_tilde = c(.5,1)#,1.5,1,1,.5)
beta_y_tilde = c(0,-.5)#,0,-.5,0,-.5)
# dstar_M = matrix(rep(c(3, 3.5, 4, 4.5, 6) ,M_ind),ncol= Mcut-3, byrow = T)
dstar_M = matrix(c( .5, -1, -2, .2, 1,
0, 0, 0, 0, 0,
.5, -1, -2, .2, 1,
0, 0, 0, 0, 0,
0.5,-1, -2, .2, 1,
0.5,-1, -2, .2, 1) ,ncol= Mcut-3, byrow = T)
# dstar_Y = matrix(c( 0.5,-1, -2, .2, 1), ncol= Ycut-3, byrow = T)
dstar_Y = matrix(c( .5, -1, -2, .2, 1,
0, 0, 0, 0, 0) ,ncol= Ycut-3, byrow = T)
cutoff_M = matrix(double(M_ind*Mcut),ncol=Mcut)
cutoff_Y = matrix(double(Y_ind*Ycut),ncol=Ycut)
for(i in 1:M_ind) cutoff_M[i,] = dstartoc(dstar_M[i,])
for(i in 1:Y_ind) cutoff_Y[i,] = dstartoc(dstar_Y[i,])
# cutoff_M = matrix(c(-100, 0, 3, 3.5, 4, 4.5, 6, 100,
#                     -100, 0, 1, 2.5, 3, 3.5, 5, 100) ,ncol= Mcut, byrow = T)
# cutoff_Y = matrix(rep(c(-100, 0, 3, 3.5, 4, 4.5, 6, 100) ,Y_ind),ncol= Ycut, byrow = T)
Data = SimMeasurementMYCat(X, beta_1, cutoff_M, beta_2, cutoff_Y, M_ind, Y_ind, dstar_M, dstar_Y, beta_m_tilde, beta_y_tilde, ssq_m_tilde, ssq_y_tilde)
#estimation
Mcut = max(Data$m_star) + 1
Ycut = max(Data$y_star) + 1
DataMeasurementMYCat = list(X=cbind(rep(1,length(Data$X)),Data$X), m_star=as.matrix(Data$m_star),
y_star=as.matrix(Data$y_star), k_M = Mcut-1, k_Y=Ycut-1,
M_ind=dim(as.matrix(Data$m_star))[2], Y_ind=dim(as.matrix(Data$y_star))[2])
Mcmc = list(R=R)
outMeasurementMYCat = MeasurementMYCat(Data=DataMeasurementMYCat, Mcmc=Mcmc)
#results
colMeans(outMeasurementMYCat$betadraw)
colMeans(outMeasurementMYCat$beta_2_draw)
apply(outMeasurementMYCat$cutdraw_M,c(1,2),FUN = mean)
apply(outMeasurementMYCat$cutdraw_Y,c(1,2),FUN = mean)
dstartoc = function (dstar){
ndstar = length(dstar)
c= rep(0,ndstar+3)
c[1] = -100;
c[2] = 0;
c[3:(ndstar+2)] = cumsum(exp(dstar));
c[ndstar+3] = 100;
return (c)
}
SimMeasurementMCat = function(X, beta_1, cutoff_M, beta_2, M_ind, dstar_M, beta_m_tilde, ssq_m_tilde){
nobs = dim(X)[1]
m_star = m_tilde = matrix(double(nobs*M_ind), ncol = M_ind)
# y_star = y_tilde = matrix(double(nobs*Y_ind), ncol = Y_ind)
M = cbind(rep(1,nobs),X)%*%beta_1 + rnorm(nobs)
for(i in 1: M_ind){
m_tilde[,i] = beta_m_tilde[i] + M + sqrt(ssq_m_tilde[i])*rnorm(nobs);
m_star[,i] = cut(m_tilde[,i], br = cutoff_M[i,], right=TRUE, include.lowest = TRUE, labels = FALSE)
}
Y = cbind(rep(1,nobs),cbind(M,X))%*%beta_2 + rnorm(nobs)
# for(i in 1: Y_ind){
#   y_tilde[,i] = beta_y_tilde[i] + Y + sqrt(ssq_y_tilde[i])*rnorm(nobs);
#   y_star[,i] = cut(y_tilde[,i], br = cutoff_Y[i,], right=TRUE, include.lowest = TRUE, labels = FALSE)
# }
return(list(Y = Y, M = M, m_star = m_star, X = X,
k_M=dim(cutoff_M)[2]-1, beta_1 = beta_1, beta_m_tilde = beta_m_tilde, ssq_m_tilde = ssq_m_tilde, m_tilde = m_tilde, cutoff_M = cutoff_M,
beta_2 = beta_2,
M_ind=M_ind, dstar_M=dstar_M))
}
M_ind = 6
# Y_ind = 2
Mcut = Ycut = 8
nobs=1000
X=as.matrix(runif(nobs,min=0, max=1))
beta_1 = c(.5,1)   # beta_1 = c(-1, 3)
beta_2 = c(1, 2, 0)
ssq_m_tilde = c(.5,1,1.5,1,1,.5)
beta_m_tilde = c(0,-.5,0,-.5,0,-.5)    #the intercepts for the latent M indicators w. measurement error
dstar_M = matrix(c( .5, -1, -2, .2, 1,
0, 0, 0, 0, 0,
.5, -1, -2, .2, 1,
0, 0, 0, 0, 0,
0.5,-1, -2, .2, 1,
0.5,-1, -2, .2, 1) ,ncol= Mcut-3, byrow = T)
cutoff_M = matrix(double(M_ind*Mcut),ncol=Mcut)
for(i in 1:M_ind) cutoff_M[i,] = dstartoc(dstar_M[i,])
# cutoff_M = matrix(c(-100, 0, 3, 3.5, 4, 4.5, 6, 100,
#                     -100, 0, 1, 2.5, 3, 3.5, 5, 100) ,ncol= Mcut, byrow = T)
# cutoff_Y = matrix(rep(c(-100, 0, 3, 3.5, 4, 4.5, 6, 100) ,Y_ind),ncol= Ycut, byrow = T)
Data = SimMeasurementMCat(X, beta_1, cutoff_M, beta_2, cutoff_Y, M_ind, Y_ind, dstar_M, dstar_Y, beta_m_tilde, beta_y_tilde, ssq_m_tilde, ssq_y_tilde)
# cutoff_M = matrix(c(-100, 0, 3, 3.5, 4, 4.5, 6, 100,
#                     -100, 0, 1, 2.5, 3, 3.5, 5, 100) ,ncol= Mcut, byrow = T)
# cutoff_Y = matrix(rep(c(-100, 0, 3, 3.5, 4, 4.5, 6, 100) ,Y_ind),ncol= Ycut, byrow = T)
Data = SimMeasurementMCat(X, beta_1, cutoff_M, beta_2, M_ind, dstar_M, beta_m_tilde, ssq_m_tilde)
#estimation
Mcut = max(Data$m_star) +1
DataMeasurementMCat = list(X=cbind(rep(1,length(Data$X)),Data$X), m_star=as.matrix(Data$m_star), Y= as.matrix(Data$Y) ,k=Mcut-1, M_ind=dim(Data$m_star)[2])
Mcmc = list(R=R)
outMeasurementMCat = MeasurementMCat(Data=DataMeasurementMCat, Mcmc=Mcmc)
#results
colMeans(outMeasurementMCat$betadraw)
colMeans(outMeasurementMCat$beta_2_draw)
apply(outMeasurementMCat$cutdraw,c(1,2),FUN = mean)
dstartoc = function (dstar){
ndstar = length(dstar)
c= rep(0,ndstar+3)
c[1] = -100;
c[2] = 0;
c[3:(ndstar+2)] = cumsum(exp(dstar));
c[ndstar+3] = 100;
return (c)
}
SimMeasurementMCat = function(X, beta_1, cutoff_M, beta_2, M_ind, dstar_M, beta_m_tilde, ssq_m_tilde){
nobs = dim(X)[1]
m_star = m_tilde = matrix(double(nobs*M_ind), ncol = M_ind)
# y_star = y_tilde = matrix(double(nobs*Y_ind), ncol = Y_ind)
M = cbind(rep(1,nobs),X)%*%beta_1 + rnorm(nobs)
for(i in 1: M_ind){
m_tilde[,i] = beta_m_tilde[i] + M + sqrt(ssq_m_tilde[i])*rnorm(nobs);
m_star[,i] = cut(m_tilde[,i], br = cutoff_M[i,], right=TRUE, include.lowest = TRUE, labels = FALSE)
}
Y = cbind(rep(1,nobs),cbind(M,X))%*%beta_2 + rnorm(nobs)
# for(i in 1: Y_ind){
#   y_tilde[,i] = beta_y_tilde[i] + Y + sqrt(ssq_y_tilde[i])*rnorm(nobs);
#   y_star[,i] = cut(y_tilde[,i], br = cutoff_Y[i,], right=TRUE, include.lowest = TRUE, labels = FALSE)
# }
return(list(Y = Y, M = M, m_star = m_star, X = X,
k_M=dim(cutoff_M)[2]-1, beta_1 = beta_1, beta_m_tilde = beta_m_tilde, ssq_m_tilde = ssq_m_tilde, m_tilde = m_tilde, cutoff_M = cutoff_M,
beta_2 = beta_2,
M_ind=M_ind, dstar_M=dstar_M))
}
M_ind = 6
# Y_ind = 2
Mcut =  8
nobs=1000
X=as.matrix(runif(nobs,min=0, max=1))
beta_1 = c(.5,1)   # beta_1 = c(-1, 3)
beta_2 = c(1, 2, 0)
ssq_m_tilde = c(.5,1,1.5,1,1,.5)
beta_m_tilde = c(0,-.5,0,-.5,0,-.5)    #the intercepts for the latent M indicators w. measurement error
dstar_M = matrix(c( .5, -1, -2, .2, 1,
0, 0, 0, 0, 0,
.5, -1, -2, .2, 1,
0, 0, 0, 0, 0,
0.5,-1, -2, .2, 1,
0.5,-1, -2, .2, 1) ,ncol= Mcut-3, byrow = T)
cutoff_M = matrix(double(M_ind*Mcut),ncol=Mcut)
for(i in 1:M_ind) cutoff_M[i,] = dstartoc(dstar_M[i,])
# cutoff_M = matrix(c(-100, 0, 3, 3.5, 4, 4.5, 6, 100,
#                     -100, 0, 1, 2.5, 3, 3.5, 5, 100) ,ncol= Mcut, byrow = T)
# cutoff_Y = matrix(rep(c(-100, 0, 3, 3.5, 4, 4.5, 6, 100) ,Y_ind),ncol= Ycut, byrow = T)
Data = SimMeasurementMCat(X, beta_1, cutoff_M, beta_2, M_ind, dstar_M, beta_m_tilde, ssq_m_tilde)
#estimation
Mcut = max(Data$m_star) +1
DataMeasurementMCat = list(X=cbind(rep(1,length(Data$X)),Data$X), m_star=as.matrix(Data$m_star), Y= as.matrix(Data$Y) ,k=Mcut-1, M_ind=dim(Data$m_star)[2])
Mcmc = list(R=R)
outMeasurementMCat = MeasurementMCat(Data=DataMeasurementMCat, Mcmc=Mcmc)
#results
colMeans(outMeasurementMCat$betadraw)
colMeans(outMeasurementMCat$beta_2_draw)
apply(outMeasurementMCat$cutdraw,c(1,2),FUN = mean)
# save(Measurement_BF_Data,
#      file = "/home/aarash/Dropbox/Work/Mediation/Mediation_Writing/figures/figuredata/Measurement_BF_Data.Rdata")
load(file = "/Users/AArash/Dropbox/Work/Mediation/Mediation_Writing/figures/figuredata/Measurement_BF_Data.Rdata")
#### Plotting BF_single ####
BF= Measurement_BF_Data$BF_single  #Results_1000$BF_multi
## Full_Measurement_Multi_SD Figure ##
BF_dens_partial = BF #saving the densities matrix for probable later use
BF=matrix(BF,ncol=1)
BF=data.frame(BF=BF,Obs=c(rep("N=50",reps),rep("N=200",reps),rep("N=1000",reps)))
names(BF)=c("BF","Obs")
BF$Obs = relevel(BF$Obs,ref = "N=1000")
#Mac
# cairo_ps(filename   = "/Users/AArash/Dropbox/Work/Mediation/Mediation_Writing/figures/Measurement_Simple.eps")
# cairo_ps(filename   = "/Users/AArash/Dropbox/Work/Mediation/Mediation_Writing/figures/Measurement_Simple_new.eps")
quartz()
ggplot(data=BF,aes(x=BF,fill=Obs)) +
theme_bw() +
xlab(expression(BF["Simple"])) +
theme(axis.title.x = element_text(size = 17),
axis.text.x = element_text(size = 17),
axis.title.y = element_text(size = 17),
axis.text.y = element_text(size = 17),
plot.margin = unit(c(0,2,0,.5), "cm")) +   #margins: top, right, bottom, left
geom_density(adjust=1 , alpha=0.7 ,show.legend = FALSE) +
xlim(0,3.2) +
ylim(0,11) +
# labs(x=expression(BF["Simple"])) +  #(BF["LVM"])) +
# theme(legend.position = c(.9,.9)) +
geom_vline(xintercept = 1/3, linetype="dotted",
color = "red", size=1) +
geom_vline(xintercept = 3.2, linetype="dotted",
color = "red", size=1)
# dev.off()
BF= Measurement_BF_Data$BF_single  #Results_1000$BF_multi
BF
## Full_Measurement_Multi_SD Figure ##
BF_dens_partial = BF #saving the densities matrix for probable later use
BF=matrix(BF,ncol=1)
BF=data.frame(BF=BF,Obs=c(rep("N=50",reps),rep("N=200",reps),rep("N=1000",reps)))
m_ind = 2; y_ind = 2;
sigma_M = 1^.5 # error std M
sigma_y = 1^.5 # error std y
sigma_m_star = c(1,2)^.5
sigma_y_star = c(2,1)^.5
beta_1 = c(1,1)
beta_2 = c(1,3,0)
lambda = matrix(c(1,1.5),ncol=2)
tau = matrix(c(1,2),ncol = 2)
k=length(beta_1)-1
reps = 1000
N = c(50,200,1000)   # number of observations
R = 2000; burnin = 1500
BF=data.frame(BF=BF,Obs=c(rep("N=50",reps),rep("N=200",reps),rep("N=1000",reps)))
names(BF)=c("BF","Obs")
BF$Obs = relevel(BF$Obs,ref = "N=1000")
quartz()
ggplot(data=BF,aes(x=BF,fill=Obs)) +
theme_bw() +
xlab(expression(BF["Simple"])) +
theme(axis.title.x = element_text(size = 17),
axis.text.x = element_text(size = 17),
axis.title.y = element_text(size = 17),
axis.text.y = element_text(size = 17),
plot.margin = unit(c(0,2,0,.5), "cm")) +   #margins: top, right, bottom, left
geom_density(adjust=1 , alpha=0.7 ,show.legend = FALSE) +
xlim(0,3.2) +
ylim(0,11) +
# labs(x=expression(BF["Simple"])) +  #(BF["LVM"])) +
# theme(legend.position = c(.9,.9)) +
geom_vline(xintercept = 1/3, linetype="dotted",
color = "red", size=1) +
geom_vline(xintercept = 3.2, linetype="dotted",
color = "red", size=1)
# dev.off()
library(ggplot2)
quartz()
ggplot(data=BF,aes(x=BF,fill=Obs)) +
theme_bw() +
xlab(expression(BF["Simple"])) +
theme(axis.title.x = element_text(size = 17),
axis.text.x = element_text(size = 17),
axis.title.y = element_text(size = 17),
axis.text.y = element_text(size = 17),
plot.margin = unit(c(0,2,0,.5), "cm")) +   #margins: top, right, bottom, left
geom_density(adjust=1 , alpha=0.7 ,show.legend = FALSE) +
xlim(0,3.2) +
ylim(0,11) +
# labs(x=expression(BF["Simple"])) +  #(BF["LVM"])) +
# theme(legend.position = c(.9,.9)) +
geom_vline(xintercept = 1/3, linetype="dotted",
color = "red", size=1) +
geom_vline(xintercept = 3.2, linetype="dotted",
color = "red", size=1)
BF= Measurement_BF_Data$BF_multi
## Full_Measurement_Multi_SD Figure ##
BF_dens_partial = BF #saving the densities matrix for probable later use
BF=matrix(BF,ncol=1)
BF=data.frame(BF=BF,Obs=c(rep("N=50",reps),rep("N=200",reps),rep("N=1000",reps)))
names(BF)=c("BF","Obs")
BF$Obs = relevel(BF$Obs,ref = "N=1000")
#Mac
# cairo_ps(filename   = "/Users/AArash/Dropbox/Work/Mediation/Mediation_Writing/figures/Measurement_LVM.eps")
# cairo_ps(filename   = "/Users/AArash/Dropbox/Work/Mediation/Mediation_Writing/figures/Measurement_LVM_new.eps")
quartz()
ggplot(data=BF,aes(x=BF,fill=Obs)) +
theme_bw() +
xlab(expression(BF["LVM"])) +
theme(axis.title.x = element_text(size = 17),
axis.text.x = element_text(size = 17),
axis.title.y = element_text(size = 17),
axis.text.y = element_text(size = 17),
plot.margin = unit(c(0,2,0,.5), "cm")) +   #margins: top, right, bottom, left
geom_density(adjust=1 , alpha=0.7 ,show.legend = FALSE) +
xlim(0,15) +
ylim(0,.75) +
theme(legend.position = c(.9,.9)) +
geom_vline(xintercept = 1/3, linetype="dotted",
color = "red", size=1) +
geom_vline(xintercept = 3.2, linetype="dotted",
color = "red", size=1)
quartz()
ggplot(data=BF,aes(x=BF,fill=Obs)) +
theme_bw() +
xlab(expression(BF["LVM"])) +
ylab("") +
theme(axis.title.x = element_text(size = 17),
axis.text.x = element_text(size = 17),
axis.title.y = element_text(size = 17),
axis.text.y = element_text(size = 17),
plot.margin = unit(c(0,2,0,.5), "cm")) +   #margins: top, right, bottom, left
geom_density(adjust=1 , alpha=0.7 ,show.legend = FALSE) +
xlim(0,15) +
ylim(0,.75) +
theme(legend.position = c(.9,.9)) +
geom_vline(xintercept = 1/3, linetype="dotted",
color = "red", size=1) +
geom_vline(xintercept = 3.2, linetype="dotted",
color = "red", size=1)
BF= Measurement_BF_Data$BF_single  #Results_1000$BF_multi
## Full_Measurement_Multi_SD Figure ##
BF_dens_partial = BF #saving the densities matrix for probable later use
BF=matrix(BF,ncol=1)
BF=data.frame(BF=BF,Obs=c(rep("N=50",reps),rep("N=200",reps),rep("N=1000",reps)))
names(BF)=c("BF","Obs")
BF$Obs = relevel(BF$Obs,ref = "N=1000")
#Mac
# cairo_ps(filename   = "/Users/AArash/Dropbox/Work/Mediation/Mediation_Writing/figures/Measurement_Simple.eps")
# cairo_ps(filename   = "/Users/AArash/Dropbox/Work/Mediation/Mediation_Writing/figures/Measurement_Simple_new.eps")
quartz()
ggplot(data=BF,aes(x=BF,fill=Obs)) +
theme_bw() +
xlab(expression(BF["Simple"])) +
theme(axis.title.x = element_text(size = 17),
axis.text.x = element_text(size = 17),
axis.title.y = element_text(size = 17),
axis.text.y = element_text(size = 17),
plot.margin = unit(c(0,2,0,.5), "cm")) +   #margins: top, right, bottom, left
geom_density(adjust=1 , alpha=0.7 ,show.legend = FALSE) +
xlim(0,3.2) +
ylim(0,11) +
# labs(x=expression(BF["Simple"])) +  #(BF["LVM"])) +
# theme(legend.position = c(.9,.9)) +
geom_vline(xintercept = 1/3, linetype="dotted",
color = "red", size=1) +
geom_vline(xintercept = 3.2, linetype="dotted",
color = "red", size=1)
#################################
### BF_multi ####
BF= Measurement_BF_Data$BF_multi
## Full_Measurement_Multi_SD Figure ##
BF_dens_partial = BF #saving the densities matrix for probable later use
BF=matrix(BF,ncol=1)
BF=data.frame(BF=BF,Obs=c(rep("N=50",reps),rep("N=200",reps),rep("N=1000",reps)))
names(BF)=c("BF","Obs")
BF$Obs = relevel(BF$Obs,ref = "N=1000")
#Mac
# cairo_ps(filename   = "/Users/AArash/Dropbox/Work/Mediation/Mediation_Writing/figures/Measurement_LVM.eps")
# cairo_ps(filename   = "/Users/AArash/Dropbox/Work/Mediation/Mediation_Writing/figures/Measurement_LVM_new.eps")
ggplot(data=BF,aes(x=BF,fill=Obs)) +
theme_bw() +
xlab(expression(BF["LVM"])) +
ylab("") +
theme(axis.title.x = element_text(size = 17),
axis.text.x = element_text(size = 17),
axis.title.y = element_text(size = 17),
axis.text.y = element_text(size = 17),
plot.margin = unit(c(0,2,0,.5), "cm")) +   #margins: top, right, bottom, left
geom_density(adjust=1 , alpha=0.7 ) + #,show.legend = FALSE) +
xlim(0,15) +
ylim(0,.75) +
theme(legend.position = c(.9,.9)) +
geom_vline(xintercept = 1/3, linetype="dotted",
color = "red", size=1) +
geom_vline(xintercept = 3.2, linetype="dotted",
color = "red", size=1)
ggplot(data=BF,aes(x=BF,fill=Obs)) +
theme_bw() +
xlab(expression(BF["LVM"])) +
ylab("") +
theme(axis.title.x = element_text(size = 17),
axis.text.x = element_text(size = 17),
axis.title.y = element_text(size = 17),
axis.text.y = element_text(size = 17),
plot.margin = unit(c(0,2,0,.5), "cm")) +   #margins: top, right, bottom, left
geom_density(adjust=1 , alpha=0.7 ) + #,show.legend = FALSE) +
xlim(0,15) +
ylim(0,.75) +
# theme(legend.position = c(.9,.9)) +
geom_vline(xintercept = 1/3, linetype="dotted",
color = "red", size=1) +
geom_vline(xintercept = 3.2, linetype="dotted",
color = "red", size=1)
ggplot(data=BF,aes(x=BF,fill=Obs)) +
theme_bw() +
xlab(expression(BF["LVM"])) +
ylab("") +
theme(axis.title.x = element_text(size = 17),
axis.text.x = element_text(size = 17),
axis.title.y = element_text(size = 17),
axis.text.y = element_text(size = 17),
plot.margin = unit(c(0,1,0,.5), "cm")) +   #margins: top, right, bottom, left
geom_density(adjust=1 , alpha=0.7 ) + #,show.legend = FALSE) +
xlim(0,15) +
ylim(0,.75) +
# theme(legend.position = c(.9,.9)) +
geom_vline(xintercept = 1/3, linetype="dotted",
color = "red", size=1) +
geom_vline(xintercept = 3.2, linetype="dotted",
color = "red", size=1)
ggplot(data=BF,aes(x=BF,fill=Obs)) +
theme_bw() +
xlab(expression(BF["LVM"])) +
ylab("") +
theme(axis.title.x = element_text(size = 17),
axis.text.x = element_text(size = 17),
axis.title.y = element_text(size = 17),
axis.text.y = element_text(size = 17),
plot.margin = unit(c(0,.5,0,.5), "cm")) +   #margins: top, right, bottom, left
geom_density(adjust=1 , alpha=0.7 ) + #,show.legend = FALSE) +
xlim(0,15) +
ylim(0,.75) +
# theme(legend.position = c(.9,.9)) +
geom_vline(xintercept = 1/3, linetype="dotted",
color = "red", size=1) +
geom_vline(xintercept = 3.2, linetype="dotted",
color = "red", size=1)
ggplot(data=BF,aes(x=BF,fill=Obs)) +
theme_bw() +
xlab(expression(BF["LVM"])) +
ylab("") +
theme(axis.title.x = element_text(size = 17),
axis.text.x = element_text(size = 17),
axis.title.y = element_text(size = 17),
axis.text.y = element_text(size = 17),
plot.margin = unit(c(0,.1,0,.1), "cm")) +   #margins: top, right, bottom, left
geom_density(adjust=1 , alpha=0.7 ) + #,show.legend = FALSE) +
xlim(0,15) +
ylim(0,.75) +
# theme(legend.position = c(.9,.9)) +
geom_vline(xintercept = 1/3, linetype="dotted",
color = "red", size=1) +
geom_vline(xintercept = 3.2, linetype="dotted",
color = "red", size=1)
cairo_ps(filename   = "/Users/AArash/Dropbox/Work/Mediation/Mediation_Writing/figures/Measurement_LVM.eps")
# cairo_ps(filename   = "/Users/AArash/Dropbox/Work/Mediation/Mediation_Writing/figures/Measurement_LVM_new.eps")
# quartz()
ggplot(data=BF,aes(x=BF,fill=Obs)) +
theme_bw() +
xlab(expression(BF["LVM"])) +
ylab("") +
theme(axis.title.x = element_text(size = 17),
axis.text.x = element_text(size = 17),
axis.title.y = element_text(size = 17),
axis.text.y = element_text(size = 17),
plot.margin = unit(c(0,.1,0,.1), "cm")) +   #margins: top, right, bottom, left
geom_density(adjust=1 , alpha=0.7 ) + #,show.legend = FALSE) +
xlim(0,15) +
ylim(0,.75) +
# theme(legend.position = c(.9,.9)) +
geom_vline(xintercept = 1/3, linetype="dotted",
color = "red", size=1) +
geom_vline(xintercept = 3.2, linetype="dotted",
color = "red", size=1)
dev.off()
